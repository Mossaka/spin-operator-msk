---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: spinapps.spin.fermyon.com
spec:
  group: spin.fermyon.com
  names:
    kind: SpinApp
    listKind: SpinAppList
    plural: spinapps
    singular: spinapp
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: SpinApp is the Schema for the spinapps API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SpinAppSpec defines the desired state of SpinApp
            properties:
              checks:
                description: Checks defines health checks that should be used by Kubernetes
                  to monitor the application.
                properties:
                  liveness:
                    description: HealthProbe defines an individual health check for
                      an application.
                    properties:
                      failureThreshold:
                        default: 3
                        description: Minimum consecutive failures for the probe to
                          be considered failed after having succeeded. Defaults to
                          3. Minimum value is 1.
                        format: int32
                        type: integer
                      httpGet:
                        description: HTTPGet describes a health check that should
                          be performed using a GET request.
                        properties:
                          httpHeaders:
                            description: HTTPHeaders are headers that should be included
                              in the health check request.
                            items:
                              description: HTTPHealthProbeHeader is an abstraction
                                around a http header key/value pair.
                              properties:
                                name:
                                  type: string
                                value:
                                  type: string
                              required:
                              - name
                              - value
                              type: object
                            type: array
                          path:
                            description: Path is the path that should be used when
                              calling the application for a health check, e.g /healthz.
                            type: string
                        required:
                        - path
                        type: object
                      initialDelaySeconds:
                        description: Number of seconds after the app has started before
                          liveness probes are initiated.
                        format: int32
                        type: integer
                      periodSeconds:
                        default: 10
                        description: How often (in seconds) to perform the probe.
                          Default to 10 seconds. Minimum value is 1.
                        format: int32
                        type: integer
                      successThreshold:
                        default: 1
                        description: Minimum consecutive successes for the probe to
                          be considered successful after having failed. Defaults to
                          1. Must be 1 for liveness and startup. Minimum value is
                          1.
                        format: int32
                        type: integer
                      timeoutSeconds:
                        default: 1
                        description: Number of seconds after which the probe times
                          out. Defaults to 1 second. Minimum value is 1.
                        format: int32
                        type: integer
                    type: object
                  readiness:
                    description: HealthProbe defines an individual health check for
                      an application.
                    properties:
                      failureThreshold:
                        default: 3
                        description: Minimum consecutive failures for the probe to
                          be considered failed after having succeeded. Defaults to
                          3. Minimum value is 1.
                        format: int32
                        type: integer
                      httpGet:
                        description: HTTPGet describes a health check that should
                          be performed using a GET request.
                        properties:
                          httpHeaders:
                            description: HTTPHeaders are headers that should be included
                              in the health check request.
                            items:
                              description: HTTPHealthProbeHeader is an abstraction
                                around a http header key/value pair.
                              properties:
                                name:
                                  type: string
                                value:
                                  type: string
                              required:
                              - name
                              - value
                              type: object
                            type: array
                          path:
                            description: Path is the path that should be used when
                              calling the application for a health check, e.g /healthz.
                            type: string
                        required:
                        - path
                        type: object
                      initialDelaySeconds:
                        description: Number of seconds after the app has started before
                          liveness probes are initiated.
                        format: int32
                        type: integer
                      periodSeconds:
                        default: 10
                        description: How often (in seconds) to perform the probe.
                          Default to 10 seconds. Minimum value is 1.
                        format: int32
                        type: integer
                      successThreshold:
                        default: 1
                        description: Minimum consecutive successes for the probe to
                          be considered successful after having failed. Defaults to
                          1. Must be 1 for liveness and startup. Minimum value is
                          1.
                        format: int32
                        type: integer
                      timeoutSeconds:
                        default: 1
                        description: Number of seconds after which the probe times
                          out. Defaults to 1 second. Minimum value is 1.
                        format: int32
                        type: integer
                    type: object
                type: object
              deploymentAnnotations:
                additionalProperties:
                  type: string
                description: DeploymentAnnotations defines annotations to be applied
                  to the underlying deployment.
                type: object
              image:
                description: Image is the source for this app.
                type: string
              imagePullSecrets:
                description: ImagePullSecrets is a list of references to secrets in
                  the same namespace to use for pulling the image.
                items:
                  description: LocalObjectReference contains enough information to
                    let you locate the referenced object inside the same namespace.
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                type: array
              podAnnotations:
                additionalProperties:
                  type: string
                description: PodAnnotations defines annotations to be applied to the
                  underlying pods.
                type: object
              replicas:
                description: Number of replicas to run.
                format: int32
                type: integer
              runtime:
                default: containerd-shim-spin
                description: Runtime is the runtime to use for this app. Defaults
                  to "containerd-shim-spin".
                enum:
                - containerd-shim-spin
                - cyclotron
                type: string
              runtimeConfig:
                description: RuntimeConfig defines configuration to be applied at
                  runtime for this app.
                properties:
                  loadFromSecret:
                    description: LoadFromSecret is the name of the secret to load
                      runtime config from. The secret should have a single key named
                      "runtime-config.toml" that contains the base64 encoded runtime
                      config.
                    type: string
                type: object
              serviceAnnotations:
                additionalProperties:
                  type: string
                description: ServiceAnnotations defines annotations to be applied
                  to the underlying service.
                type: object
            required:
            - image
            - replicas
            - runtime
            type: object
          status:
            description: SpinAppStatus defines the observed state of SpinApp
            properties:
              active:
                description: A list of pointers to currently running spin apps.
                items:
                  description: "ObjectReference contains enough information to let
                    you inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its usage
                    when embedded in APIs. 1. Ignored fields.  It includes many fields
                    which are not generally honored.  For instance, ResourceVersion
                    and FieldPath are both very rarely valid in actual usage. 2. Invalid
                    usage help.  It is impossible to add specific help for individual
                    usage.  In most embedded usages, there are particular restrictions
                    like, \"must refer only to types A and B\" or \"UID not honored\"
                    or \"name must be restricted\". Those cannot be well described
                    when embedded. 3. Inconsistent validation.  Because the usages
                    are different, the validation rules are different by usage, which
                    makes it hard for users to predict what will happen. 4. The fields
                    are both imprecise and overly precise.  Kind is not a precise
                    mapping to a URL. This can produce ambiguity during interpretation
                    and require a REST mapping.  In most cases, the dependency is
                    on the group,resource tuple and the version of the actual struct
                    is irrelevant. 5. We cannot easily change it.  Because this type
                    is embedded in many locations, updates to this type will affect
                    numerous schemas.  Don't make new APIs embed an underspecified
                    API type they do not control. \n Instead of using this type, create
                    a locally provided and used type that is well-focused on your
                    reference. For example, ServiceReferences for admission registration:
                    https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                    ."
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                type: array
              lastScheduleTime:
                description: Information when was the last time the spin app was successfully
                  scheduled.
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
