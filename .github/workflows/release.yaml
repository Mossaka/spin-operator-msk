name: Release

on:
  push:
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io

jobs:
  # Note: we release the chart on every release/tag in the repo, keeping the chart version
  # and operator version (appVersion in Chart.yaml) aligned, primarily to keep things simple
  # instead of attempting to manage asynchronous chart releases/versions.
  publish-chart:
    name: Package and publish chart and manifests
    runs-on: ubuntu-latest
    env:
      APP_VERSION: "${{ github.ref_name }}"
      CHART_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install helm
        uses: Azure/setup-helm@v3
        with:
          version: v3.14.0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Determine chart version - tag
        # NOTE: We remove the leading 'v' to comply with helm's versioning requirements
        run: echo "CHART_VERSION=$(echo -n ${{ github.ref_name }} | sed -rn 's/(v)?(.*)/\2/p')" >> "$GITHUB_ENV"

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build chart
        run: make helm-generate

      - name: Package chart and manifests
        run: make dist

      - name: Lint packaged chart
        run: |
          # Remove staged chart directory and lint the packaged version
          rm -rf _dist/spin-operator-${{ env.CHART_VERSION }}
          helm lint _dist/spin-operator-${{ env.CHART_VERSION }}.tgz

      - name: Upload chart and manifests as GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: spin-operator
          path: _dist

      - name: Publish chart
        run: make helm-publish

  create-gh-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [publish-chart]
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: download release assets
        uses: actions/download-artifact@v4
        with:
          name: spin-operator
          path: _dist

      - name: check if pre-release
        shell: bash
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+.[0-9]+.[0-9]+$ ]]
          then
            echo "PRERELEASE=--prerelease" >> "$GITHUB_ENV"
          fi

      - name: create GitHub release
        run: |
          gh release create ${{ github.ref_name }} _dist/* \
            --title ${{ github.ref_name }} \
            --generate-notes ${{ env.PRERELEASE }}